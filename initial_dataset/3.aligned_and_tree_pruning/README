## Objective: Extracting protein-coding genes of the above-mentioned clades with similar length
##I will be using most-similar amino-acid sequences to get most-similar CDS
##cd /path/to/all_datasets
for dirs in `ls -d all_datasets/*_dataset`
do
rm "$dirs"/data/*_list
cp consen.py "$dirs"/data/consen.py
cp cladelist/* "$dirs"/data/
done

for dir in `ls -d *_dataset`
do
cd "$dir"/data
rm -f *_similar_length_cds.fa
gene=`echo $dir|cut -f1 -d "_"`
for aa in `ls -1 *_list_orf.fa`
do
  clade=`echo $aa|cut -f2 -d"_"`
  grep ">" "$aa"|sed -e 's/>//g' |cut -f1,2 -d"_" > protein_acc.txt
  grep ">" "$aa"|sed -e 's/>//g' |sed 's/_/\t/2' > pacc_spname.txt
  for pacc in `cat protein_acc.txt`
  do
    spname=`grep "\b$pacc\b" pacc_spname.txt|cut -f2`
    grep "\b$pacc\b" data_table.tsv|cut -f14|sed -e 's/:/\t/g' -e 's/-/\t/g'|awk '{print $1,$2-1,$3}' OFS='\t'|head -n1 > temp.bed
    cdsacc=`awk '{print $1}' temp.bed`
    bedtools getfasta -fi rna.fna -bed temp.bed |awk '{print $1}' FS=':' > temp.seq
    sed -i "s/$cdsacc/$spname/g" temp.seq
    cat temp.seq >> "$gene"_"$clade"_similar_length_cds.fa
    rm temp.bed temp.seq
  done
 done
cd ../..
done

###Now we will move all the CDS multifasta files to the same folder from their individual folders
for dir in `ls -d *_dataset`
do
cp "$dir"/data/*_similar_length_cds.fa /path/to/similar
done
cd /path/to/similar


##removing the sequences which have premature stop codon in between
####we will make use of orthochecker.py for this
##this file takes a multifasta file and output name as input argument and returns the sequences which have proper ORF and exclude those which does not have proper ORF
##please run a command on the multifasta file such that the header will be in one line and the whole sequence of the species will be in one line only
##in the end, it will create a multifasta file with only proper ORFs and trim the STOP codon from the end
import sys
import re
filename=sys.argv[1]
outname=sys.argv[2]
fn = open(filename, 'r')
h = fn.readlines()
for i in range(0,len(h),2):
  seqrange=i+1
  header=h[i]
  line=h[seqrange]
  header=header.strip()
  line=line.strip()
  print(header)
  #print(line)
  #print(len(line))
  if line.startswith("ATG") and len(line)%3==0 and line.endswith(("TAA","TAG","TGA")) and re.match('^[ATGCN]*$', line):
    line=line[:-3]
    n=3
    codonlist=[]
    for index in range(0,len(line),n):
      codon=line[index:index+n]
      codonlist.append(codon)
    if 'TAA' not in codonlist and 'TAG' not in codonlist and 'TGA' not in codonlist:
      print(header, file=open(str(outname)+"_orf.txt", "a"))
      print(line, file=open(str(outname)+"_orf.txt", "a"))
#################################################################
ls|grep -v "ortho\|old\|allfiles" > allfiles
for files in `cat allfiles`
do
outname=`echo $files|sed 's/_cds.fa//g'`
python3 orthochecker.py $files $outname
done
mkdir all_orfs
ls|grep -v "ortho\|allfiles\|old" > allfiles
for i in `grep "length_orf" allfiles`
do
cp $i all_orfs/
done
cd all_orfs/
###removing all the files which have less than 4 sequences
find . -type f -exec awk -v x=8 'NR==x{exit 1}' {} \; -exec rm -f {} \;

###############################################Running the codon alignment
guidance=/path/to/guidance.v2.02/www/Guidance
ls > fasta_list
sed -i '/fasta_list/d' fasta_list
cp fasta_list fasta_list_backup
for i in `cat fasta_list`
do
j=`echo $i|sed 's/.txt//g'`
perl "$guidance"/guidance.pl --program GUIDANCE --seqFile "$i" --msaProgram MUSCLE --seqType codon --outDir "$j".100_MUSCLE --genCode 1 --bootstraps 100 --proc_num 2
done

###Keeping all the aligned files in a folder
mkdir all_aligned
ls|grep "MUSCLE" > allfolders
while read i
do
j=`echo $i|sed 's/100_MUSCLE/aln/g'`
cp "$i"/MSA.MUSCLE.aln.With_Names all_aligned/$j
done < allfolders

######################
####making species names in similar files upto second name only
cd /path/to/similar_cds_aligned
ls|grep "_similar_length_orf.aln" > allalnfiles
while read j
do
sed -i 's/_[^_]*//2g' "$j"
done < allalnfiles

####NOTE: Please move the *_list_unrooted.nwk species trees to the same folder before running the below commands
ls|grep "_similar_length_orf.aln" > allfiles
##example of a file name: A1BG_afrotheria_similar_length_orf.aln
cp allfiles allfiles_backup
for i in `cat allfiles`
do
o=`echo $i|sed 's/_similar_length_orf.aln//g'`
clade=`echo $i|cut -f2 -d"_"`
t=`ls "$clade"_list_unrooted.nwk`
grep ">" "$i"|sed 's/>//g' > "$o"_list
Rscript pruning.r $t "$o"_list "$o"
done
